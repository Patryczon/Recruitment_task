// Mocks generated by Mockito 5.4.5 from annotations
// in sofomo_task/test/modules/issues_list/bloc/issues_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:github_repository/github_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepositoriesResponse_0 extends _i1.SmartFake
    implements _i2.RepositoriesResponse {
  _FakeRepositoriesResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GithubRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepository extends _i1.Mock implements _i2.GithubRepository {
  MockGithubRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.RepositoriesResponse> getRepositories({
    required String? query,
    required int? page,
    required int? resultsPerPage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getRepositories, [], {
              #query: query,
              #page: page,
              #resultsPerPage: resultsPerPage,
            }),
            returnValue: _i3.Future<_i2.RepositoriesResponse>.value(
              _FakeRepositoriesResponse_0(
                this,
                Invocation.method(#getRepositories, [], {
                  #query: query,
                  #page: page,
                  #resultsPerPage: resultsPerPage,
                }),
              ),
            ),
          )
          as _i3.Future<_i2.RepositoriesResponse>);

  @override
  _i3.Future<List<_i2.Issue>> getIssues({
    required String? owner,
    required String? repository,
    required int? page,
    required int? resultsPerPage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getIssues, [], {
              #owner: owner,
              #repository: repository,
              #page: page,
              #resultsPerPage: resultsPerPage,
            }),
            returnValue: _i3.Future<List<_i2.Issue>>.value(<_i2.Issue>[]),
          )
          as _i3.Future<List<_i2.Issue>>);

  @override
  _i3.Future<List<_i2.PullRequest>> getPullRequests({
    required String? owner,
    required String? repository,
    required int? page,
    required int? resultsPerPage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPullRequests, [], {
              #owner: owner,
              #repository: repository,
              #page: page,
              #resultsPerPage: resultsPerPage,
            }),
            returnValue: _i3.Future<List<_i2.PullRequest>>.value(
              <_i2.PullRequest>[],
            ),
          )
          as _i3.Future<List<_i2.PullRequest>>);
}
